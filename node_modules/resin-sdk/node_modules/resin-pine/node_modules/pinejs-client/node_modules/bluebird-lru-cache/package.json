{
  "name": "bluebird-lru-cache",
  "version": "1.0.0",
  "description": "<a href=\"http://promisesaplus.com/\">\r     <img src=\"http://promisesaplus.com/assets/logo-small.png\" alt=\"Promises/A+ logo\" title=\"Promises/A+ 1.0 compliant\" align=\"right\" />\r </a>",
  "main": "index.js",
  "scripts": {
    "test": "node node_modules/coffee-script/bin/coffee -c . && node node_modules/mocha/bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/resin-io/bluebird-lru-cache.git"
  },
  "author": "",
  "license": "",
  "dependencies": {
    "bluebird": "^3.0.6",
    "lru-cache": "^3.2.0",
    "typed-error": "~0.1.0"
  },
  "devDependencies": {
    "chai": "^3.4.1",
    "chai-as-promised": "^5.0.0",
    "coffee-script": "~1.10.0",
    "mocha": "^2.2.5"
  },
  "readme": "<a href=\"http://promisesaplus.com/\">\r\n    <img src=\"http://promisesaplus.com/assets/logo-small.png\" alt=\"Promises/A+ logo\" title=\"Promises/A+ 1.0 compliant\" align=\"right\" />\r\n</a>\r\n\r\nbluebird-lru-cache\r\n=========\r\n\r\nIn-memory, Promises/A+ [lru-cache](https://github.com/isaacs/node-lru-cache) via [bluebird](https://github.com/petkaantonov/bluebird), inspired by [bluecache](https://github.com/kurttheviking/bluecache)\r\n\r\n\r\n### Motivation\r\n\r\nAllow easy use of LRU-Cache within a promise architecture, both accepting and returning promises.\r\n\r\n\r\n### Usage\r\n\r\n```\r\nvar BluebirdLRU = require(\"bluebird-lru-cache\");\r\nvar options = {\r\n  max: 500,\r\n  maxAge: 1000 * 60 * 60\r\n};\r\n\r\nvar cache = BluebirdLRU(options);\r\n\r\ncache.set(\"key\", \"value\")\r\n.then(function () {\r\n\treturn cache.get(\"key\")\r\n})\r\n.then(function (value) {\r\n\tconsole.log(value);  // \"value\"\r\n});\r\n```\r\n\r\n\r\n### Options\r\n\r\nOptions are passed directly to LRU Cache at instantiation; the below documentation is based on the API descriptions of the underlying LRU Cache:\r\n\r\n- `max`: The maximum size of the cache, checked by applying the length function to all values in the cache\r\n- `maxAge`: Maximum age in ms; lazily enforced; expired keys will return `undefined`\r\n- `length`: Function called to calculate the length of stored items (e.g. `function(n) { return n.length; }`); defaults to `function(n) { return 1; }`\r\n- `dispose`: Function called on items immediately before they are dropped from the cache. Called with parameters (`key`, `value`)\r\n- `stale`: Allow the cache to return the stale (expired via `MaxAge`) value before deleting it\r\n- `noreject`: _bluebird-lru-cache only_; Boolean; instructs bluebird-lru-cache not to generate rejected promises and instead resolve to undefined for missing or expired output from `get` and `peek`;  defaults to `false`\r\n- `fetchFn`: _bluebird-lru-cache only_; Function; instructs bluebird-lru-cache to use this function to fetch and store data using this function if it does not already exist in the cache, instead of returning a rejection or `undefined`\r\n\r\n\r\n### API\r\n\r\nAny of the arguments for these functions can be a promise, which will be resolved before executing the method.\r\n\r\n**`set(key, value, max)`**\r\n\r\nSet the given `key` in the cache to `value`; updates the \"recently-used\"-ness of the key; returns a promise that resolves to a boolean indicating whether the value was stored or not (in the case of the value being too large it will not be stored).  \r\n`max` is optional and overrides the cache `max` option if provided.\r\n\r\n```\r\nvar promisedKey = Promise.resolved().delay(500).then(function () {\r\n\treturn 'foo';\r\n});\r\nvar promisedValue = Promise.resolved().delay(500).then(function () {\r\n\treturn 'bar';\r\n});\r\n\r\ncache.set(promisedKey, promisedValue).then(function (cached) {\r\n\tconsole.log(cached);  // => true\r\n});\r\n```\r\n\r\n\r\n**get(key)**\r\n\r\nReturns a promise that resolves to the cached value of `key`; updates the \"recently-used\"-ness of the key.\r\n\r\nIn the case of the key not existing, the Promise will be rejected with a `BluebirdLRU.NoSuchKeyError`, with a `key` property that resolves to the key that could not be found.\r\n\r\n\r\n**peek(key)**\r\n\r\nReturns a promise that resolves to the cached value of `key` _without_ updating the \"recently-used\"-ness of the key.\r\n\r\nIn the case of the key not existing, the Promise will be rejected with a `BluebirdLRU.NoSuchKeyError`, with a `key` property that resolves to the key that could not be found.\r\n\r\n\r\n**del(key)**\r\n\r\nReturns a promise that resolves to `undefined` after deleting the key from the cache.\r\n\r\n\r\n**reset()**\r\n\r\nReturns a promise that resolves to `undefined` after removing the key from the cache.\r\n\r\n\r\n**has(key)**\r\n\r\nReturns a promise that resolves to either `true` or `false` without updating the \"recently-used\"-ness; does not impact the use of `stale` data.\r\n\r\n\r\n**forEach(function(value,key,cache), [thisp])**\r\n\r\nJust like `Array.prototype.forEach`.  Iterates over all the keys in the cache, in order of recent-ness.  (Ie, more recently used items are iterated over first.)\r\n\r\n\r\n**keys()**\r\n\r\nReturns a promise that resolves to an array of the keys in the cache.\r\n\r\n```\r\ncache.keys().then(function (keys) {\r\n\tconsole.log(keys);\r\n});\r\n```\r\n\r\n**values()**\r\n\r\nReturns a promise that resolves to an array of the values in the cache.\r\n\r\n```\r\ncache.values().then(function (values) {\r\n\tconsole.log(values);\r\n});\r\n```\r\n\r\n**length()**\r\n\r\nReturn total length of objects in cache taking into account `length` options function.\r\n\r\n**itemCount()**\r\n\r\nReturn total quantity of objects currently in cache. Note, that `stale` (see options) items are returned as part of this item count.\r\n\r\n### Rejection handling\r\n\r\nBy default BluebirdLRU returns a rejected promise for get/peek operations that fail, as such:\r\n\r\n```\r\nvar BluebirdLRU = require('bluebird-lru-cache');\r\n\r\nvar cache = BluebirdLRU();\r\n\r\ncache.get('foo').catch(BluebirdLRU.NoSuchKeyError, function (err) {\r\n\tconsole.log('Could not find key:', err.key); // => \"Could not find key: foo\"\r\n});\r\n```\r\n\r\nyou can disable this with the `noreject` option:\r\n\r\n```\r\nvar BluebirdLRU = require('bluebird-lru-cache');\r\n\r\nvar cache = BluebirdLRU({\r\n  noreject: true\r\n});\r\n\r\ncache.get('foo').then(function (value) {\r\n\tif (value === undefined) {\r\n\t\tconsole.log('Could not find key'); // => \"Could not find key\"\r\n\t}\r\n});\r\n```\r\n\r\n### Contribute\r\n\r\nPRs are welcome! For bugs, please include a failing test which passes when your PR is applied.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/resin-io/bluebird-lru-cache/issues"
  },
  "_id": "bluebird-lru-cache@1.0.0",
  "dist": {
    "shasum": "7110b5a4b9b5f6da9c618e7cd6867c62447d09ff"
  },
  "_from": "bluebird-lru-cache@^1.0.0",
  "_resolved": "https://registry.npmjs.org/bluebird-lru-cache/-/bluebird-lru-cache-1.0.0.tgz"
}
