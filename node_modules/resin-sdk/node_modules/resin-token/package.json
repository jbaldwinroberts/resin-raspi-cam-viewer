{
  "name": "resin-token",
  "version": "2.4.2",
  "description": "Resin.io session token utilities",
  "main": "build/token.js",
  "homepage": "https://github.com/resin-io/resin-token",
  "repository": {
    "type": "git",
    "url": "git://github.com/resin-io/resin-token.git"
  },
  "keywords": [
    "resin",
    "token",
    "session"
  ],
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "gulp test",
    "prepublish": "gulp build",
    "readme": "jsdoc2md --template doc/README.hbs build/token.js > README.md"
  },
  "author": {
    "name": "Juan Cruz Viotti",
    "email": "juanchiviotti@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "coffee-script": "~1.8.0",
    "gulp": "~3.8.10",
    "gulp-coffee": "~2.2.0",
    "gulp-coffeelint": "~0.4.0",
    "gulp-mocha": "~2.0.0",
    "gulp-util": "~3.0.1",
    "jsdoc-to-markdown": "^1.1.1",
    "mocha": "~2.0.1",
    "mochainon": "^1.0.0",
    "timekeeper": "0.0.5"
  },
  "dependencies": {
    "atob": "^1.1.2",
    "bluebird": "^2.9.30",
    "resin-errors": "^2.0.0",
    "resin-settings-storage": "^1.0.1"
  },
  "readme": "resin-token\n-----------\n\n[![npm version](https://badge.fury.io/js/resin-token.svg)](http://badge.fury.io/js/resin-token)\n[![dependencies](https://david-dm.org/resin-io/resin-token.png)](https://david-dm.org/resin-io/resin-token.png)\n[![Build Status](https://travis-ci.org/resin-io/resin-token.svg?branch=master)](https://travis-ci.org/resin-io/resin-token)\n[![Build status](https://ci.appveyor.com/api/projects/status/i01h2qi3raf0acm7?svg=true)](https://ci.appveyor.com/project/jviotti/resin-token)\n\nResin.io session token utilities.\n\nRole\n----\n\nThe intention of this module is to provide low level access to how a Resin.io session token is parsed and persisted.\n\n**THIS MODULE IS LOW LEVEL AND IS NOT MEANT TO BE USED BY END USERS DIRECTLY**.\n\nUnless you know what you're doing, use the [Resin SDK](https://github.com/resin-io/resin-sdk) instead.\n\nInstallation\n------------\n\nInstall `resin-token` by running:\n\n```sh\n$ npm install --save resin-token\n```\n\nDocumentation\n-------------\n\n\n* [token](#module_token)\n  * [.isValid(token)](#module_token.isValid) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n  * [.set(token)](#module_token.set) ⇒ <code>Promise.&lt;String&gt;</code>\n  * [.get()](#module_token.get) ⇒ <code>Promise.&lt;String&gt;</code>\n  * [.has()](#module_token.has) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n  * [.remove()](#module_token.remove) ⇒ <code>Promise</code>\n  * [.parse(token)](#module_token.parse) ⇒ <code>Promise.&lt;Object&gt;</code>\n  * [.getData()](#module_token.getData) ⇒ <code>Promise.&lt;Object&gt;</code>\n  * [.getProperty(property)](#module_token.getProperty) ⇒ <code>Promise.&lt;\\*&gt;</code>\n  * [.getUsername()](#module_token.getUsername) ⇒ <code>Promise.&lt;String&gt;</code>\n  * [.getUserId()](#module_token.getUserId) ⇒ <code>Promise.&lt;Number&gt;</code>\n  * [.getEmail()](#module_token.getEmail) ⇒ <code>Promise.&lt;String&gt;</code>\n  * [.getAge()](#module_token.getAge) ⇒ <code>Promise.&lt;Number&gt;</code>\n\n<a name=\"module_token.isValid\"></a>\n### token.isValid(token) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Check if a token is valid  \n**Returns**: <code>Promise.&lt;Boolean&gt;</code> - is valid  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| token | <code>String</code> | token |\n\n**Example**  \n```js\ntoken.isValid('...').then (isValid) ->\n\tif isValid\n\t\tconsole.log('The token is valid!')\n```\n<a name=\"module_token.set\"></a>\n### token.set(token) ⇒ <code>Promise.&lt;String&gt;</code>\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Set the token  \n**Returns**: <code>Promise.&lt;String&gt;</code> - token  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| token | <code>String</code> | token |\n\n**Example**  \n```js\ntoken.set('...')\n```\n<a name=\"module_token.get\"></a>\n### token.get() ⇒ <code>Promise.&lt;String&gt;</code>\nThis function resolved to undefined if no token.\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get the token  \n**Returns**: <code>Promise.&lt;String&gt;</code> - token  \n**Access:** public  \n**Example**  \n```js\ntoken.get().then (sessionToken) ->\n\t\tconsole.log(sessionToken)\n```\n<a name=\"module_token.has\"></a>\n### token.has() ⇒ <code>Promise.&lt;Boolean&gt;</code>\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Has a token  \n**Returns**: <code>Promise.&lt;Boolean&gt;</code> - has token  \n**Access:** public  \n**Example**  \n```js\ntoken.has().then (hasToken) ->\n\t\tif hasToken\n\t\t\tconsole.log('There is a token!')\n\t\telse\n\t\t\tconsole.log('There is not a token!')\n```\n<a name=\"module_token.remove\"></a>\n### token.remove() ⇒ <code>Promise</code>\nThis promise is not rejected if there was no token at the time of removal.\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Remove the token  \n**Access:** public  \n**Example**  \n```js\ntoken.remove()\n```\n<a name=\"module_token.parse\"></a>\n### token.parse(token) ⇒ <code>Promise.&lt;Object&gt;</code>\nThis function does't save the token. Use `token.set()` if you want to persist it afterwards.\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Parse a token  \n**Returns**: <code>Promise.&lt;Object&gt;</code> - parsed token  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| token | <code>String</code> | token |\n\n**Example**  \n```js\ntoken.parse('...').then (parsedToken) ->\n\t\tconsole.log(parsedToken)\n```\n<a name=\"module_token.getData\"></a>\n### token.getData() ⇒ <code>Promise.&lt;Object&gt;</code>\nIn this context, \"data\" refers to the information encoded in the token.\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get the saved token data  \n**Returns**: <code>Promise.&lt;Object&gt;</code> - token data  \n**Access:** public  \n**Example**  \n```js\ntoken.getData().then (data) ->\n\t\tconsole.log(data)\n```\n<a name=\"module_token.getProperty\"></a>\n### token.getProperty(property) ⇒ <code>Promise.&lt;\\*&gt;</code>\nThis function resolves to undefined for any property name if there is no token.\nIt also resolved to undefined if the property name is invalid.\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get a property from a saved token  \n**Returns**: <code>Promise.&lt;\\*&gt;</code> - property value  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| property | <code>String</code> | property name |\n\n**Example**  \n```js\ntoken.getProperty('username').then (username) ->\n\t\tconsole.log(username)\n```\n<a name=\"module_token.getUsername\"></a>\n### token.getUsername() ⇒ <code>Promise.&lt;String&gt;</code>\nThis function resolves to undefined if there is no token\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get the username of the saved token  \n**Returns**: <code>Promise.&lt;String&gt;</code> - username  \n**Access:** public  \n**Example**  \n```js\ntoken.getUsername().then (username) ->\n\t\tconsole.log(username)\n```\n<a name=\"module_token.getUserId\"></a>\n### token.getUserId() ⇒ <code>Promise.&lt;Number&gt;</code>\nThis function resolves to undefined if there is no token\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get the user id of the saved token  \n**Returns**: <code>Promise.&lt;Number&gt;</code> - user id  \n**Access:** public  \n**Example**  \n```js\ntoken.getUserId().then (userId) ->\n\t\tconsole.log(userId)\n```\n<a name=\"module_token.getEmail\"></a>\n### token.getEmail() ⇒ <code>Promise.&lt;String&gt;</code>\nThis function resolves to undefined if there is no token\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get the email of the saved token  \n**Returns**: <code>Promise.&lt;String&gt;</code> - email  \n**Access:** public  \n**Example**  \n```js\ntoken.getEmail().then (email) ->\n\t\tconsole.log(email)\n```\n<a name=\"module_token.getAge\"></a>\n### token.getAge() ⇒ <code>Promise.&lt;Number&gt;</code>\nThis function resolves to undefined if there is no token\n\n**Kind**: static method of <code>[token](#module_token)</code>  \n**Summary**: Get the age of the saved token  \n**Returns**: <code>Promise.&lt;Number&gt;</code> - age in milliseconds  \n**Access:** public  \n**Example**  \n```js\ntoken.getAge().then (age) ->\n\t\tconsole.log(age)\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/resin-io/resin-token/issues/new) on GitHub and the Resin.io team will be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ gulp test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/resin-io/resin-token/issues](https://github.com/resin-io/resin-token/issues)\n- Source Code: [github.com/resin-io/resin-token](https://github.com/resin-io/resin-token)\n\nBefore submitting a PR, please make sure that you include tests, and that [coffeelint](http://www.coffeelint.org/) runs without any warning:\n\n```sh\n$ gulp lint\n```\n\nLicense\n-------\n\nThe project is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/resin-io/resin-token/issues"
  },
  "_id": "resin-token@2.4.2",
  "dist": {
    "shasum": "bdcadeabec31fd04a7a7c9de8674aeec4ea3156a"
  },
  "_from": "resin-token@^2.4.2",
  "_resolved": "https://registry.npmjs.org/resin-token/-/resin-token-2.4.2.tgz"
}
