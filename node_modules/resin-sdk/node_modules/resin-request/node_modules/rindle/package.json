{
  "name": "rindle",
  "version": "1.3.0",
  "description": "Collection of utilities for working with Streams",
  "main": "lib/rindle.js",
  "homepage": "https://github.com/jviotti/rindle",
  "repository": {
    "type": "git",
    "url": "git://github.com/jviotti/rindle.git"
  },
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "gulp test",
    "prepublish": "gulp test",
    "readme": "jsdoc2md --template doc/README.hbs lib/{,**/}*.js > README.md"
  },
  "keywords": [
    "rindle",
    "stream",
    "utils",
    "toolbelt",
    "util"
  ],
  "author": {
    "name": "Juan Cruz Viotti",
    "email": "jviottidc@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-jshint": "^1.11.2",
    "gulp-mocha": "^2.1.3",
    "jsdoc-to-markdown": "^1.1.1",
    "jshint-stylish": "^2.0.1",
    "mochainon": "^1.0.0",
    "tmp": "0.0.28"
  },
  "dependencies": {
    "bluebird": "^2.10.2",
    "lodash": "^3.10.1",
    "string-to-stream": "^1.0.1"
  },
  "readme": "rindle\n======\n\n[![npm version](https://badge.fury.io/js/rindle.svg)](http://badge.fury.io/js/rindle)\n[![dependencies](https://david-dm.org/jviotti/rindle.png)](https://david-dm.org/jviotti/rindle.png)\n[![Build Status](https://travis-ci.org/jviotti/rindle.svg?branch=master)](https://travis-ci.org/jviotti/rindle)\n[![Build status](https://ci.appveyor.com/api/projects/status/cjyj0u68pq3x7031?svg=true)](https://ci.appveyor.com/project/resin-io/rindle)\n\nCollection of utilities for working with Streams.\n\nDescription\n-----------\n\nThis is a collection of functions that operate on streams to encapsulate some of the tasks I usually have to do in my project. I'll be adding more as I encounter more patterns.\n\nInstallation\n------------\n\nInstall `rindle` by running:\n\n```sh\n$ npm install --save rindle\n```\n\nDocumentation\n-------------\n\n\n* [rindle](#module_rindle)\n  * [.wait(stream, callback)](#module_rindle.wait)\n  * [.extract(stream, callback)](#module_rindle.extract)\n  * [.bifurcate(stream, output1, output2, callback)](#module_rindle.bifurcate)\n  * [.pipeWithEvents(stream, output, events)](#module_rindle.pipeWithEvents) ⇒ <code>StreamReadable</code>\n  * [.onEvent(stream, event, callback)](#module_rindle.onEvent)\n  * [.getStreamFromString(string)](#module_rindle.getStreamFromString) ⇒ <code>ReadableStream</code>\n\n<a name=\"module_rindle.wait\"></a>\n### rindle.wait(stream, callback)\nThis functions listens for the following events:\n\n- `close`.\n- `end`.\n- `done`.\n\nIf those events pass any argument when being emitted, you'll be able to access them as arguments to the callback.\n\n**Kind**: static method of <code>[rindle](#module_rindle)</code>  \n**Summary**: Wait for a stream to close  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| stream | <code>Stream</code> | stream |\n| callback | <code>function</code> | callback (error, args...) |\n\n**Example**  \n```js\nvar fs = require('fs');\nvar rindle = require('rindle');\n\nvar input = fs.createReadStream('foo/bar');\nvar output = fs.createWriteStream('foo/baz');\n\ninput.pipe(output);\n\nrindle.wait(output, function(error) {\n  if (error) throw error;\n  console.log('The output stream was closed!');\n});\n```\n<a name=\"module_rindle.extract\"></a>\n### rindle.extract(stream, callback)\nNotice this function only extracts the *remaining data* from the stream.\n\n**Kind**: static method of <code>[rindle](#module_rindle)</code>  \n**Summary**: Extract data from readable stream  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| stream | <code>StreamReadable</code> | stream |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nvar fs = require('fs');\nvar rindle = require('rindle');\n\nvar input = fs.createReadStream('foo/bar');\n\nrindle.extract(input, function(error, data) {\n  if (error) throw error;\n  console.log('The file contains: ' + data);\n});\n```\n<a name=\"module_rindle.bifurcate\"></a>\n### rindle.bifurcate(stream, output1, output2, callback)\nThe callback is called when both output stream close.\n\n**Kind**: static method of <code>[rindle](#module_rindle)</code>  \n**Summary**: Bifurcate readable stream to two writable streams  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| stream | <code>StreamReadable</code> | input stream |\n| output1 | <code>StreamWritable</code> | first output stream |\n| output2 | <code>StreamWritable</code> | second output stream |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nvar fs = require('fs');\nvar rindle = require('rindle');\n\nvar input = fs.createReadStream('foo/bar');\nvar output1 = fs.createWriteStream('foo/baz');\nvar output2 = fs.createWriteStream('foo/qux');\n\nrindle.bifurcate(input, output1, output2, function(error) {\n  if (error) throw error;\n\n  console.log('All files written!');\n});\n```\n<a name=\"module_rindle.pipeWithEvents\"></a>\n### rindle.pipeWithEvents(stream, output, events) ⇒ <code>StreamReadable</code>\n**Kind**: static method of <code>[rindle](#module_rindle)</code>  \n**Summary**: Pipe a stream along with certain events  \n**Returns**: <code>StreamReadable</code> - resulting stream  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| stream | <code>StreamReadable</code> | input stream |\n| output | <code>StreamWritable</code> | output stream |\n| events | <code>Array.&lt;String&gt;</code> | events to pipe |\n\n**Example**  \n```js\nvar rindle = require('rindle');\n\nrindle.pipeWithEvents(input, output, [\n  'response',\n  'request'\n]);\n```\n<a name=\"module_rindle.onEvent\"></a>\n### rindle.onEvent(stream, event, callback)\n**Kind**: static method of <code>[rindle](#module_rindle)</code>  \n**Summary**: Wait for a stream to emit a certain event  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| stream | <code>Stream</code> | stream |\n| event | <code>String</code> | event name |\n| callback | <code>function</code> | callback (error, args...) |\n\n**Example**  \n```js\nvar rindle = require('rindle');\nvar fs = require('fs');\n\nrindle.onEvent(fs.createReadStream('foo/bar'), 'open', function(error, fd) {\n  if (error) throw error;\n\n  console.log('The \"open\" event was emitted');\n  console.log(fd);\n});\n```\n<a name=\"module_rindle.getStreamFromString\"></a>\n### rindle.getStreamFromString(string) ⇒ <code>ReadableStream</code>\n**Kind**: static method of <code>[rindle](#module_rindle)</code>  \n**Summary**: Get a readable stream from a string  \n**Returns**: <code>ReadableStream</code> - - string stream  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| string | <code>String</code> | input string |\n\n**Example**  \n```js\nvar rindle = require('rindle');\nrindle.getStreamFromString('Hello World!').pipe(process.stdout);\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/jviotti/rindle/issues/new) on GitHub and I'll be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ gulp test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/jviotti/rindle/issues](https://github.com/jviotti/rindle/issues)\n- Source Code: [github.com/jviotti/rindle](https://github.com/jviotti/rindle)\n\nBefore submitting a PR, please make sure that you include tests, and that [jshint](http://jshint.com) runs without any warning:\n\n```sh\n$ gulp lint\n```\n\nLicense\n-------\n\nThe project is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jviotti/rindle/issues"
  },
  "_id": "rindle@1.3.0",
  "dist": {
    "shasum": "c012e3b684ce9b4dfbff7f3ae9a05d52b3811163"
  },
  "_from": "rindle@^1.2.0",
  "_resolved": "https://registry.npmjs.org/rindle/-/rindle-1.3.0.tgz"
}
